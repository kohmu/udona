{"ast":null,"code":"// bufferish-array.js\nvar Bufferish = require(\"./bufferish\");\n\nvar exports = module.exports = alloc(0);\nexports.alloc = alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Array(size);\n}\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Array}\n */\n\n\nfunction from(value) {\n  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {\n    // TypedArray to Uint8Array\n    value = Bufferish.Uint8Array.from(value);\n  } else if (Bufferish.isArrayBuffer(value)) {\n    // ArrayBuffer to Uint8Array\n    value = new Uint8Array(value);\n  } else if (typeof value === \"string\") {\n    // String to Array\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  } // Array-like to Array\n\n\n  return Array.prototype.slice.call(value);\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/bufferish-array.js"],"names":["Bufferish","require","exports","module","alloc","concat","from","size","Array","value","isBuffer","isView","Uint8Array","isArrayBuffer","call","TypeError","prototype","slice"],"mappings":"AAAA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,KAAK,CAAC,CAAD,CAApC;AAEAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB;AACAF,OAAO,CAACG,MAAR,GAAiBL,SAAS,CAACK,MAA3B;AACAH,OAAO,CAACI,IAAR,GAAeA,IAAf;AAEA;AACA;AACA;AACA;;AAEA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACnB,SAAO,IAAIC,KAAJ,CAAUD,IAAV,CAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASD,IAAT,CAAcG,KAAd,EAAqB;AACnB,MAAI,CAACT,SAAS,CAACU,QAAV,CAAmBD,KAAnB,CAAD,IAA8BT,SAAS,CAACW,MAAV,CAAiBF,KAAjB,CAAlC,EAA2D;AACzD;AACAA,IAAAA,KAAK,GAAGT,SAAS,CAACY,UAAV,CAAqBN,IAArB,CAA0BG,KAA1B,CAAR;AACD,GAHD,MAGO,IAAIT,SAAS,CAACa,aAAV,CAAwBJ,KAAxB,CAAJ,EAAoC;AACzC;AACAA,IAAAA,KAAK,GAAG,IAAIG,UAAJ,CAAeH,KAAf,CAAR;AACD,GAHM,MAGA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC;AACA,WAAOT,SAAS,CAACM,IAAV,CAAeQ,IAAf,CAAoBZ,OAApB,EAA6BO,KAA7B,CAAP;AACD,GAHM,MAGA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,UAAM,IAAIM,SAAJ,CAAc,uCAAd,CAAN;AACD,GAZkB,CAcnB;;;AACA,SAAOP,KAAK,CAACQ,SAAN,CAAgBC,KAAhB,CAAsBH,IAAtB,CAA2BL,KAA3B,CAAP;AACD","sourcesContent":["// bufferish-array.js\n\nvar Bufferish = require(\"./bufferish\");\n\nvar exports = module.exports = alloc(0);\n\nexports.alloc = alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Array(size);\n}\n\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Array}\n */\n\nfunction from(value) {\n  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {\n    // TypedArray to Uint8Array\n    value = Bufferish.Uint8Array.from(value);\n  } else if (Bufferish.isArrayBuffer(value)) {\n    // ArrayBuffer to Uint8Array\n    value = new Uint8Array(value);\n  } else if (typeof value === \"string\") {\n    // String to Array\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  // Array-like to Array\n  return Array.prototype.slice.call(value);\n}\n"]},"metadata":{},"sourceType":"script"}