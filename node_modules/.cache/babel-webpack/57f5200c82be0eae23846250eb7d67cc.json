{"ast":null,"code":"// bufferish.js\nvar Buffer = exports.global = require(\"./buffer-global\");\n\nvar hasBuffer = exports.hasBuffer = Buffer && !!Buffer.isBuffer;\nvar hasArrayBuffer = exports.hasArrayBuffer = \"undefined\" !== typeof ArrayBuffer;\n\nvar isArray = exports.isArray = require(\"isarray\");\n\nexports.isArrayBuffer = hasArrayBuffer ? isArrayBuffer : _false;\nvar isBuffer = exports.isBuffer = hasBuffer ? Buffer.isBuffer : _false;\nvar isView = exports.isView = hasArrayBuffer ? ArrayBuffer.isView || _is(\"ArrayBuffer\", \"buffer\") : _false;\nexports.alloc = alloc;\nexports.concat = concat;\nexports.from = from;\n\nvar BufferArray = exports.Array = require(\"./bufferish-array\");\n\nvar BufferBuffer = exports.Buffer = require(\"./bufferish-buffer\");\n\nvar BufferUint8Array = exports.Uint8Array = require(\"./bufferish-uint8array\");\n\nvar BufferProto = exports.prototype = require(\"./bufferish-proto\");\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Buffer|Uint8Array|Array}\n */\n\n\nfunction from(value) {\n  if (typeof value === \"string\") {\n    return fromString.call(this, value);\n  } else {\n    return auto(this).from(value);\n  }\n}\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\n\nfunction alloc(size) {\n  return auto(this).alloc(size);\n}\n/**\n * @param list {Array} array of (Buffer|Uint8Array|Array)s\n * @param [length]\n * @returns {Buffer|Uint8Array|Array}\n */\n\n\nfunction concat(list, length) {\n  if (!length) {\n    length = 0;\n    Array.prototype.forEach.call(list, dryrun);\n  }\n\n  var ref = this !== exports && this || list[0];\n  var result = alloc.call(ref, length);\n  var offset = 0;\n  Array.prototype.forEach.call(list, append);\n  return result;\n\n  function dryrun(buffer) {\n    length += buffer.length;\n  }\n\n  function append(buffer) {\n    offset += BufferProto.copy.call(buffer, result, offset);\n  }\n}\n\nvar _isArrayBuffer = _is(\"ArrayBuffer\");\n\nfunction isArrayBuffer(value) {\n  return value instanceof ArrayBuffer || _isArrayBuffer(value);\n}\n/**\n * @private\n */\n\n\nfunction fromString(value) {\n  var expected = value.length * 3;\n  var that = alloc.call(this, expected);\n  var actual = BufferProto.write.call(that, value);\n\n  if (expected !== actual) {\n    that = BufferProto.slice.call(that, 0, actual);\n  }\n\n  return that;\n}\n\nfunction auto(that) {\n  return isBuffer(that) ? BufferBuffer : isView(that) ? BufferUint8Array : isArray(that) ? BufferArray : hasBuffer ? BufferBuffer : hasArrayBuffer ? BufferUint8Array : BufferArray;\n}\n\nfunction _false() {\n  return false;\n}\n\nfunction _is(name, key) {\n  /* jshint eqnull:true */\n  name = \"[object \" + name + \"]\";\n  return function (value) {\n    return value != null && {}.toString.call(key ? value[key] : value) === name;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}