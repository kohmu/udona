{"ast":null,"code":"// decoder.js\nexports.Decoder = Decoder;\n\nvar EventLite = require(\"event-lite\");\n\nvar DecodeBuffer = require(\"./decode-buffer\").DecodeBuffer;\n\nfunction Decoder(options) {\n  if (!(this instanceof Decoder)) return new Decoder(options);\n  DecodeBuffer.call(this, options);\n}\n\nDecoder.prototype = new DecodeBuffer();\nEventLite.mixin(Decoder.prototype);\n\nDecoder.prototype.decode = function (chunk) {\n  if (arguments.length) this.write(chunk);\n  this.flush();\n};\n\nDecoder.prototype.push = function (chunk) {\n  this.emit(\"data\", chunk);\n};\n\nDecoder.prototype.end = function (chunk) {\n  this.decode(chunk);\n  this.emit(\"end\");\n};","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/decoder.js"],"names":["exports","Decoder","EventLite","require","DecodeBuffer","options","call","prototype","mixin","decode","chunk","arguments","length","write","flush","push","emit","end"],"mappings":"AAAA;AAEAA,OAAO,CAACC,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAA9C;;AAEA,SAASH,OAAT,CAAiBI,OAAjB,EAA0B;AACxB,MAAI,EAAE,gBAAgBJ,OAAlB,CAAJ,EAAgC,OAAO,IAAIA,OAAJ,CAAYI,OAAZ,CAAP;AAChCD,EAAAA,YAAY,CAACE,IAAb,CAAkB,IAAlB,EAAwBD,OAAxB;AACD;;AAEDJ,OAAO,CAACM,SAAR,GAAoB,IAAIH,YAAJ,EAApB;AAEAF,SAAS,CAACM,KAAV,CAAgBP,OAAO,CAACM,SAAxB;;AAEAN,OAAO,CAACM,SAAR,CAAkBE,MAAlB,GAA2B,UAASC,KAAT,EAAgB;AACzC,MAAIC,SAAS,CAACC,MAAd,EAAsB,KAAKC,KAAL,CAAWH,KAAX;AACtB,OAAKI,KAAL;AACD,CAHD;;AAKAb,OAAO,CAACM,SAAR,CAAkBQ,IAAlB,GAAyB,UAASL,KAAT,EAAgB;AACvC,OAAKM,IAAL,CAAU,MAAV,EAAkBN,KAAlB;AACD,CAFD;;AAIAT,OAAO,CAACM,SAAR,CAAkBU,GAAlB,GAAwB,UAASP,KAAT,EAAgB;AACtC,OAAKD,MAAL,CAAYC,KAAZ;AACA,OAAKM,IAAL,CAAU,KAAV;AACD,CAHD","sourcesContent":["// decoder.js\n\nexports.Decoder = Decoder;\n\nvar EventLite = require(\"event-lite\");\nvar DecodeBuffer = require(\"./decode-buffer\").DecodeBuffer;\n\nfunction Decoder(options) {\n  if (!(this instanceof Decoder)) return new Decoder(options);\n  DecodeBuffer.call(this, options);\n}\n\nDecoder.prototype = new DecodeBuffer();\n\nEventLite.mixin(Decoder.prototype);\n\nDecoder.prototype.decode = function(chunk) {\n  if (arguments.length) this.write(chunk);\n  this.flush();\n};\n\nDecoder.prototype.push = function(chunk) {\n  this.emit(\"data\", chunk);\n};\n\nDecoder.prototype.end = function(chunk) {\n  this.decode(chunk);\n  this.emit(\"end\");\n};\n"]},"metadata":{},"sourceType":"script"}