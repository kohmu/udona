{"ast":null,"code":"// buffer-lite.js\nvar MAXBUFLEN = 8192;\nexports.copy = copy;\nexports.toString = toString;\nexports.write = write;\n/**\n * Buffer.prototype.write()\n *\n * @param string {String}\n * @param [offset] {Number}\n * @returns {Number}\n */\n\nfunction write(string, offset) {\n  var buffer = this;\n  var index = offset || (offset |= 0);\n  var length = string.length;\n  var chr = 0;\n  var i = 0;\n\n  while (i < length) {\n    chr = string.charCodeAt(i++);\n\n    if (chr < 128) {\n      buffer[index++] = chr;\n    } else if (chr < 0x800) {\n      // 2 bytes\n      buffer[index++] = 0xC0 | chr >>> 6;\n      buffer[index++] = 0x80 | chr & 0x3F;\n    } else if (chr < 0xD800 || chr > 0xDFFF) {\n      // 3 bytes\n      buffer[index++] = 0xE0 | chr >>> 12;\n      buffer[index++] = 0x80 | chr >>> 6 & 0x3F;\n      buffer[index++] = 0x80 | chr & 0x3F;\n    } else {\n      // 4 bytes - surrogate pair\n      chr = (chr - 0xD800 << 10 | string.charCodeAt(i++) - 0xDC00) + 0x10000;\n      buffer[index++] = 0xF0 | chr >>> 18;\n      buffer[index++] = 0x80 | chr >>> 12 & 0x3F;\n      buffer[index++] = 0x80 | chr >>> 6 & 0x3F;\n      buffer[index++] = 0x80 | chr & 0x3F;\n    }\n  }\n\n  return index - offset;\n}\n/**\n * Buffer.prototype.toString()\n *\n * @param [encoding] {String} ignored\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {String}\n */\n\n\nfunction toString(encoding, start, end) {\n  var buffer = this;\n  var index = start | 0;\n  if (!end) end = buffer.length;\n  var string = '';\n  var chr = 0;\n\n  while (index < end) {\n    chr = buffer[index++];\n\n    if (chr < 128) {\n      string += String.fromCharCode(chr);\n      continue;\n    }\n\n    if ((chr & 0xE0) === 0xC0) {\n      // 2 bytes\n      chr = (chr & 0x1F) << 6 | buffer[index++] & 0x3F;\n    } else if ((chr & 0xF0) === 0xE0) {\n      // 3 bytes\n      chr = (chr & 0x0F) << 12 | (buffer[index++] & 0x3F) << 6 | buffer[index++] & 0x3F;\n    } else if ((chr & 0xF8) === 0xF0) {\n      // 4 bytes\n      chr = (chr & 0x07) << 18 | (buffer[index++] & 0x3F) << 12 | (buffer[index++] & 0x3F) << 6 | buffer[index++] & 0x3F;\n    }\n\n    if (chr >= 0x010000) {\n      // A surrogate pair\n      chr -= 0x010000;\n      string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n    } else {\n      string += String.fromCharCode(chr);\n    }\n  }\n\n  return string;\n}\n/**\n * Buffer.prototype.copy()\n *\n * @param target {Buffer}\n * @param [targetStart] {Number}\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {number}\n */\n\n\nfunction copy(target, targetStart, start, end) {\n  var i;\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (!targetStart) targetStart = 0;\n  var len = end - start;\n\n  if (target === this && start < targetStart && targetStart < end) {\n    // descending\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    // ascending\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start];\n    }\n  }\n\n  return len;\n}","map":null,"metadata":{},"sourceType":"script"}