{"ast":null,"code":"// bufferish-uint8array.js\nvar Bufferish = require(\"./bufferish\");\n\nvar exports = module.exports = Bufferish.hasArrayBuffer ? alloc(0) : [];\nexports.alloc = alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Uint8Array(size);\n}\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Uint8Array}\n */\n\n\nfunction from(value) {\n  if (Bufferish.isView(value)) {\n    // TypedArray to ArrayBuffer\n    var byteOffset = value.byteOffset;\n    var byteLength = value.byteLength;\n    value = value.buffer;\n\n    if (value.byteLength !== byteLength) {\n      if (value.slice) {\n        value = value.slice(byteOffset, byteOffset + byteLength);\n      } else {\n        // Android 4.1 does not have ArrayBuffer.prototype.slice\n        value = new Uint8Array(value);\n\n        if (value.byteLength !== byteLength) {\n          // TypedArray to ArrayBuffer to Uint8Array to Array\n          value = Array.prototype.slice.call(value, byteOffset, byteOffset + byteLength);\n        }\n      }\n    }\n  } else if (typeof value === \"string\") {\n    // String to Uint8Array\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  return new Uint8Array(value);\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/bufferish-uint8array.js"],"names":["Bufferish","require","exports","module","hasArrayBuffer","alloc","concat","from","size","Uint8Array","value","isView","byteOffset","byteLength","buffer","slice","Array","prototype","call","TypeError"],"mappings":"AAAA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBF,SAAS,CAACI,cAAV,GAA2BC,KAAK,CAAC,CAAD,CAAhC,GAAsC,EAArE;AAEAH,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACAH,OAAO,CAACI,MAAR,GAAiBN,SAAS,CAACM,MAA3B;AACAJ,OAAO,CAACK,IAAR,GAAeA,IAAf;AAEA;AACA;AACA;AACA;;AAEA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACnB,SAAO,IAAIC,UAAJ,CAAeD,IAAf,CAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASD,IAAT,CAAcG,KAAd,EAAqB;AACnB,MAAIV,SAAS,CAACW,MAAV,CAAiBD,KAAjB,CAAJ,EAA6B;AAC3B;AACA,QAAIE,UAAU,GAAGF,KAAK,CAACE,UAAvB;AACA,QAAIC,UAAU,GAAGH,KAAK,CAACG,UAAvB;AACAH,IAAAA,KAAK,GAAGA,KAAK,CAACI,MAAd;;AACA,QAAIJ,KAAK,CAACG,UAAN,KAAqBA,UAAzB,EAAqC;AACnC,UAAIH,KAAK,CAACK,KAAV,EAAiB;AACfL,QAAAA,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAYH,UAAZ,EAAwBA,UAAU,GAAGC,UAArC,CAAR;AACD,OAFD,MAEO;AACL;AACAH,QAAAA,KAAK,GAAG,IAAID,UAAJ,CAAeC,KAAf,CAAR;;AACA,YAAIA,KAAK,CAACG,UAAN,KAAqBA,UAAzB,EAAqC;AACnC;AACAH,UAAAA,KAAK,GAAGM,KAAK,CAACC,SAAN,CAAgBF,KAAhB,CAAsBG,IAAtB,CAA2BR,KAA3B,EAAkCE,UAAlC,EAA8CA,UAAU,GAAGC,UAA3D,CAAR;AACD;AACF;AACF;AACF,GAjBD,MAiBO,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AACpC;AACA,WAAOV,SAAS,CAACO,IAAV,CAAeW,IAAf,CAAoBhB,OAApB,EAA6BQ,KAA7B,CAAP;AACD,GAHM,MAGA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,UAAM,IAAIS,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAED,SAAO,IAAIV,UAAJ,CAAeC,KAAf,CAAP;AACD","sourcesContent":["// bufferish-uint8array.js\n\nvar Bufferish = require(\"./bufferish\");\n\nvar exports = module.exports = Bufferish.hasArrayBuffer ? alloc(0) : [];\n\nexports.alloc = alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Uint8Array(size);\n}\n\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Uint8Array}\n */\n\nfunction from(value) {\n  if (Bufferish.isView(value)) {\n    // TypedArray to ArrayBuffer\n    var byteOffset = value.byteOffset;\n    var byteLength = value.byteLength;\n    value = value.buffer;\n    if (value.byteLength !== byteLength) {\n      if (value.slice) {\n        value = value.slice(byteOffset, byteOffset + byteLength);\n      } else {\n        // Android 4.1 does not have ArrayBuffer.prototype.slice\n        value = new Uint8Array(value);\n        if (value.byteLength !== byteLength) {\n          // TypedArray to ArrayBuffer to Uint8Array to Array\n          value = Array.prototype.slice.call(value, byteOffset, byteOffset + byteLength);\n        }\n      }\n    }\n  } else if (typeof value === \"string\") {\n    // String to Uint8Array\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  return new Uint8Array(value);\n}\n"]},"metadata":{},"sourceType":"script"}