{"ast":null,"code":"// ext-unpacker.js\nexports.setExtUnpackers = setExtUnpackers;\n\nvar Bufferish = require(\"./bufferish\");\n\nvar Buffer = Bufferish.global;\n\nvar _decode;\n\nvar ERROR_COLUMNS = {\n  name: 1,\n  message: 1,\n  stack: 1,\n  columnNumber: 1,\n  fileName: 1,\n  lineNumber: 1\n};\n\nfunction setExtUnpackers(codec) {\n  codec.addExtUnpacker(0x0E, [decode, unpackError(Error)]);\n  codec.addExtUnpacker(0x01, [decode, unpackError(EvalError)]);\n  codec.addExtUnpacker(0x02, [decode, unpackError(RangeError)]);\n  codec.addExtUnpacker(0x03, [decode, unpackError(ReferenceError)]);\n  codec.addExtUnpacker(0x04, [decode, unpackError(SyntaxError)]);\n  codec.addExtUnpacker(0x05, [decode, unpackError(TypeError)]);\n  codec.addExtUnpacker(0x06, [decode, unpackError(URIError)]);\n  codec.addExtUnpacker(0x0A, [decode, unpackRegExp]);\n  codec.addExtUnpacker(0x0B, [decode, unpackClass(Boolean)]);\n  codec.addExtUnpacker(0x0C, [decode, unpackClass(String)]);\n  codec.addExtUnpacker(0x0D, [decode, unpackClass(Date)]);\n  codec.addExtUnpacker(0x0F, [decode, unpackClass(Number)]);\n\n  if (\"undefined\" !== typeof Uint8Array) {\n    codec.addExtUnpacker(0x11, unpackClass(Int8Array));\n    codec.addExtUnpacker(0x12, unpackClass(Uint8Array));\n    codec.addExtUnpacker(0x13, [unpackArrayBuffer, unpackClass(Int16Array)]);\n    codec.addExtUnpacker(0x14, [unpackArrayBuffer, unpackClass(Uint16Array)]);\n    codec.addExtUnpacker(0x15, [unpackArrayBuffer, unpackClass(Int32Array)]);\n    codec.addExtUnpacker(0x16, [unpackArrayBuffer, unpackClass(Uint32Array)]);\n    codec.addExtUnpacker(0x17, [unpackArrayBuffer, unpackClass(Float32Array)]); // PhantomJS/1.9.7 doesn't have Float64Array\n\n    if (\"undefined\" !== typeof Float64Array) {\n      codec.addExtUnpacker(0x18, [unpackArrayBuffer, unpackClass(Float64Array)]);\n    } // IE10 doesn't have Uint8ClampedArray\n\n\n    if (\"undefined\" !== typeof Uint8ClampedArray) {\n      codec.addExtUnpacker(0x19, unpackClass(Uint8ClampedArray));\n    }\n\n    codec.addExtUnpacker(0x1A, unpackArrayBuffer);\n    codec.addExtUnpacker(0x1D, [unpackArrayBuffer, unpackClass(DataView)]);\n  }\n\n  if (Bufferish.hasBuffer) {\n    codec.addExtUnpacker(0x1B, unpackClass(Buffer));\n  }\n}\n\nfunction decode(input) {\n  if (!_decode) _decode = require(\"./decode\").decode; // lazy load\n\n  return _decode(input);\n}\n\nfunction unpackRegExp(value) {\n  return RegExp.apply(null, value);\n}\n\nfunction unpackError(Class) {\n  return function (value) {\n    var out = new Class();\n\n    for (var key in ERROR_COLUMNS) {\n      out[key] = value[key];\n    }\n\n    return out;\n  };\n}\n\nfunction unpackClass(Class) {\n  return function (value) {\n    return new Class(value);\n  };\n}\n\nfunction unpackArrayBuffer(value) {\n  return new Uint8Array(value).buffer;\n}","map":null,"metadata":{},"sourceType":"script"}