{"ast":null,"code":"// read-format.js\nvar ieee754 = require(\"ieee754\");\n\nvar Int64Buffer = require(\"int64-buffer\");\n\nvar Uint64BE = Int64Buffer.Uint64BE;\nvar Int64BE = Int64Buffer.Int64BE;\nexports.getReadFormat = getReadFormat;\nexports.readUint8 = uint8;\n\nvar Bufferish = require(\"./bufferish\");\n\nvar BufferProto = require(\"./bufferish-proto\");\n\nvar HAS_MAP = \"undefined\" !== typeof Map;\nvar NO_ASSERT = true;\n\nfunction getReadFormat(options) {\n  var binarraybuffer = Bufferish.hasArrayBuffer && options && options.binarraybuffer;\n  var int64 = options && options.int64;\n  var usemap = HAS_MAP && options && options.usemap;\n  var readFormat = {\n    map: usemap ? map_to_map : map_to_obj,\n    array: array,\n    str: str,\n    bin: binarraybuffer ? bin_arraybuffer : bin_buffer,\n    ext: ext,\n    uint8: uint8,\n    uint16: uint16,\n    uint32: uint32,\n    uint64: read(8, int64 ? readUInt64BE_int64 : readUInt64BE),\n    int8: int8,\n    int16: int16,\n    int32: int32,\n    int64: read(8, int64 ? readInt64BE_int64 : readInt64BE),\n    float32: read(4, readFloatBE),\n    float64: read(8, readDoubleBE)\n  };\n  return readFormat;\n}\n\nfunction map_to_obj(decoder, len) {\n  var value = {};\n  var i;\n  var k = new Array(len);\n  var v = new Array(len);\n  var decode = decoder.codec.decode;\n\n  for (i = 0; i < len; i++) {\n    k[i] = decode(decoder);\n    v[i] = decode(decoder);\n  }\n\n  for (i = 0; i < len; i++) {\n    value[k[i]] = v[i];\n  }\n\n  return value;\n}\n\nfunction map_to_map(decoder, len) {\n  var value = new Map();\n  var i;\n  var k = new Array(len);\n  var v = new Array(len);\n  var decode = decoder.codec.decode;\n\n  for (i = 0; i < len; i++) {\n    k[i] = decode(decoder);\n    v[i] = decode(decoder);\n  }\n\n  for (i = 0; i < len; i++) {\n    value.set(k[i], v[i]);\n  }\n\n  return value;\n}\n\nfunction array(decoder, len) {\n  var value = new Array(len);\n  var decode = decoder.codec.decode;\n\n  for (var i = 0; i < len; i++) {\n    value[i] = decode(decoder);\n  }\n\n  return value;\n}\n\nfunction str(decoder, len) {\n  var start = decoder.reserve(len);\n  var end = start + len;\n  return BufferProto.toString.call(decoder.buffer, \"utf-8\", start, end);\n}\n\nfunction bin_buffer(decoder, len) {\n  var start = decoder.reserve(len);\n  var end = start + len;\n  var buf = BufferProto.slice.call(decoder.buffer, start, end);\n  return Bufferish.from(buf);\n}\n\nfunction bin_arraybuffer(decoder, len) {\n  var start = decoder.reserve(len);\n  var end = start + len;\n  var buf = BufferProto.slice.call(decoder.buffer, start, end);\n  return Bufferish.Uint8Array.from(buf).buffer;\n}\n\nfunction ext(decoder, len) {\n  var start = decoder.reserve(len + 1);\n  var type = decoder.buffer[start++];\n  var end = start + len;\n  var unpack = decoder.codec.getExtUnpacker(type);\n  if (!unpack) throw new Error(\"Invalid ext type: \" + (type ? \"0x\" + type.toString(16) : type));\n  var buf = BufferProto.slice.call(decoder.buffer, start, end);\n  return unpack(buf);\n}\n\nfunction uint8(decoder) {\n  var start = decoder.reserve(1);\n  return decoder.buffer[start];\n}\n\nfunction int8(decoder) {\n  var start = decoder.reserve(1);\n  var value = decoder.buffer[start];\n  return value & 0x80 ? value - 0x100 : value;\n}\n\nfunction uint16(decoder) {\n  var start = decoder.reserve(2);\n  var buffer = decoder.buffer;\n  return buffer[start++] << 8 | buffer[start];\n}\n\nfunction int16(decoder) {\n  var start = decoder.reserve(2);\n  var buffer = decoder.buffer;\n  var value = buffer[start++] << 8 | buffer[start];\n  return value & 0x8000 ? value - 0x10000 : value;\n}\n\nfunction uint32(decoder) {\n  var start = decoder.reserve(4);\n  var buffer = decoder.buffer;\n  return buffer[start++] * 16777216 + (buffer[start++] << 16) + (buffer[start++] << 8) + buffer[start];\n}\n\nfunction int32(decoder) {\n  var start = decoder.reserve(4);\n  var buffer = decoder.buffer;\n  return buffer[start++] << 24 | buffer[start++] << 16 | buffer[start++] << 8 | buffer[start];\n}\n\nfunction read(len, method) {\n  return function (decoder) {\n    var start = decoder.reserve(len);\n    return method.call(decoder.buffer, start, NO_ASSERT);\n  };\n}\n\nfunction readUInt64BE(start) {\n  return new Uint64BE(this, start).toNumber();\n}\n\nfunction readInt64BE(start) {\n  return new Int64BE(this, start).toNumber();\n}\n\nfunction readUInt64BE_int64(start) {\n  return new Uint64BE(this, start);\n}\n\nfunction readInt64BE_int64(start) {\n  return new Int64BE(this, start);\n}\n\nfunction readFloatBE(start) {\n  return ieee754.read(this, start, false, 23, 4);\n}\n\nfunction readDoubleBE(start) {\n  return ieee754.read(this, start, false, 52, 8);\n}","map":null,"metadata":{},"sourceType":"script"}