{"ast":null,"code":"// write-core.js\nvar ExtBuffer = require(\"./ext-buffer\").ExtBuffer;\n\nvar ExtPacker = require(\"./ext-packer\");\n\nvar WriteType = require(\"./write-type\");\n\nvar CodecBase = require(\"./codec-base\");\n\nCodecBase.install({\n  addExtPacker: addExtPacker,\n  getExtPacker: getExtPacker,\n  init: init\n});\nexports.preset = init.call(CodecBase.preset);\n\nfunction getEncoder(options) {\n  var writeType = WriteType.getWriteType(options);\n  return encode;\n\n  function encode(encoder, value) {\n    var func = writeType[typeof value];\n    if (!func) throw new Error(\"Unsupported type \\\"\" + typeof value + \"\\\": \" + value);\n    func(encoder, value);\n  }\n}\n\nfunction init() {\n  var options = this.options;\n  this.encode = getEncoder(options);\n\n  if (options && options.preset) {\n    ExtPacker.setExtPackers(this);\n  }\n\n  return this;\n}\n\nfunction addExtPacker(etype, Class, packer) {\n  packer = CodecBase.filter(packer);\n  var name = Class.name;\n\n  if (name && name !== \"Object\") {\n    var packers = this.extPackers || (this.extPackers = {});\n    packers[name] = extPacker;\n  } else {\n    // fallback for IE\n    var list = this.extEncoderList || (this.extEncoderList = []);\n    list.unshift([Class, extPacker]);\n  }\n\n  function extPacker(value) {\n    if (packer) value = packer(value);\n    return new ExtBuffer(value, etype);\n  }\n}\n\nfunction getExtPacker(value) {\n  var packers = this.extPackers || (this.extPackers = {});\n  var c = value.constructor;\n  var e = c && c.name && packers[c.name];\n  if (e) return e; // fallback for IE\n\n  var list = this.extEncoderList || (this.extEncoderList = []);\n  var len = list.length;\n\n  for (var i = 0; i < len; i++) {\n    var pair = list[i];\n    if (c === pair[0]) return pair[1];\n  }\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/write-core.js"],"names":["ExtBuffer","require","ExtPacker","WriteType","CodecBase","install","addExtPacker","getExtPacker","init","exports","preset","call","getEncoder","options","writeType","getWriteType","encode","encoder","value","func","Error","setExtPackers","etype","Class","packer","filter","name","packers","extPackers","extPacker","list","extEncoderList","unshift","c","constructor","e","len","length","i","pair"],"mappings":"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","sourcesContent":["// write-core.js\n\nvar ExtBuffer = require(\"./ext-buffer\").ExtBuffer;\nvar ExtPacker = require(\"./ext-packer\");\nvar WriteType = require(\"./write-type\");\nvar CodecBase = require(\"./codec-base\");\n\nCodecBase.install({\n  addExtPacker: addExtPacker,\n  getExtPacker: getExtPacker,\n  init: init\n});\n\nexports.preset = init.call(CodecBase.preset);\n\nfunction getEncoder(options) {\n  var writeType = WriteType.getWriteType(options);\n  return encode;\n\n  function encode(encoder, value) {\n    var func = writeType[typeof value];\n    if (!func) throw new Error(\"Unsupported type \\\"\" + (typeof value) + \"\\\": \" + value);\n    func(encoder, value);\n  }\n}\n\nfunction init() {\n  var options = this.options;\n  this.encode = getEncoder(options);\n\n  if (options && options.preset) {\n    ExtPacker.setExtPackers(this);\n  }\n\n  return this;\n}\n\nfunction addExtPacker(etype, Class, packer) {\n  packer = CodecBase.filter(packer);\n  var name = Class.name;\n  if (name && name !== \"Object\") {\n    var packers = this.extPackers || (this.extPackers = {});\n    packers[name] = extPacker;\n  } else {\n    // fallback for IE\n    var list = this.extEncoderList || (this.extEncoderList = []);\n    list.unshift([Class, extPacker]);\n  }\n\n  function extPacker(value) {\n    if (packer) value = packer(value);\n    return new ExtBuffer(value, etype);\n  }\n}\n\nfunction getExtPacker(value) {\n  var packers = this.extPackers || (this.extPackers = {});\n  var c = value.constructor;\n  var e = c && c.name && packers[c.name];\n  if (e) return e;\n\n  // fallback for IE\n  var list = this.extEncoderList || (this.extEncoderList = []);\n  var len = list.length;\n  for (var i = 0; i < len; i++) {\n    var pair = list[i];\n    if (c === pair[0]) return pair[1];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}