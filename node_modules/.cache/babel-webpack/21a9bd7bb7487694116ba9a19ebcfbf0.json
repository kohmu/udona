{"ast":null,"code":"// encoder.js\nexports.Encoder = Encoder;\n\nvar EventLite = require(\"event-lite\");\n\nvar EncodeBuffer = require(\"./encode-buffer\").EncodeBuffer;\n\nfunction Encoder(options) {\n  if (!(this instanceof Encoder)) return new Encoder(options);\n  EncodeBuffer.call(this, options);\n}\n\nEncoder.prototype = new EncodeBuffer();\nEventLite.mixin(Encoder.prototype);\n\nEncoder.prototype.encode = function (chunk) {\n  this.write(chunk);\n  this.emit(\"data\", this.read());\n};\n\nEncoder.prototype.end = function (chunk) {\n  if (arguments.length) this.encode(chunk);\n  this.flush();\n  this.emit(\"end\");\n};","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/encoder.js"],"names":["exports","Encoder","EventLite","require","EncodeBuffer","options","call","prototype","mixin","encode","chunk","write","emit","read","end","arguments","length","flush"],"mappings":"AAAA;AAEAA,OAAO,CAACC,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAA9C;;AAEA,SAASH,OAAT,CAAiBI,OAAjB,EAA0B;AACxB,MAAI,EAAE,gBAAgBJ,OAAlB,CAAJ,EAAgC,OAAO,IAAIA,OAAJ,CAAYI,OAAZ,CAAP;AAChCD,EAAAA,YAAY,CAACE,IAAb,CAAkB,IAAlB,EAAwBD,OAAxB;AACD;;AAEDJ,OAAO,CAACM,SAAR,GAAoB,IAAIH,YAAJ,EAApB;AAEAF,SAAS,CAACM,KAAV,CAAgBP,OAAO,CAACM,SAAxB;;AAEAN,OAAO,CAACM,SAAR,CAAkBE,MAAlB,GAA2B,UAASC,KAAT,EAAgB;AACzC,OAAKC,KAAL,CAAWD,KAAX;AACA,OAAKE,IAAL,CAAU,MAAV,EAAkB,KAAKC,IAAL,EAAlB;AACD,CAHD;;AAKAZ,OAAO,CAACM,SAAR,CAAkBO,GAAlB,GAAwB,UAASJ,KAAT,EAAgB;AACtC,MAAIK,SAAS,CAACC,MAAd,EAAsB,KAAKP,MAAL,CAAYC,KAAZ;AACtB,OAAKO,KAAL;AACA,OAAKL,IAAL,CAAU,KAAV;AACD,CAJD","sourcesContent":["// encoder.js\n\nexports.Encoder = Encoder;\n\nvar EventLite = require(\"event-lite\");\nvar EncodeBuffer = require(\"./encode-buffer\").EncodeBuffer;\n\nfunction Encoder(options) {\n  if (!(this instanceof Encoder)) return new Encoder(options);\n  EncodeBuffer.call(this, options);\n}\n\nEncoder.prototype = new EncodeBuffer();\n\nEventLite.mixin(Encoder.prototype);\n\nEncoder.prototype.encode = function(chunk) {\n  this.write(chunk);\n  this.emit(\"data\", this.read());\n};\n\nEncoder.prototype.end = function(chunk) {\n  if (arguments.length) this.encode(chunk);\n  this.flush();\n  this.emit(\"end\");\n};\n"]},"metadata":{},"sourceType":"script"}