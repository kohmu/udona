{"ast":null,"code":"// read-core.js\nvar ExtBuffer = require(\"./ext-buffer\").ExtBuffer;\n\nvar ExtUnpacker = require(\"./ext-unpacker\");\n\nvar readUint8 = require(\"./read-format\").readUint8;\n\nvar ReadToken = require(\"./read-token\");\n\nvar CodecBase = require(\"./codec-base\");\n\nCodecBase.install({\n  addExtUnpacker: addExtUnpacker,\n  getExtUnpacker: getExtUnpacker,\n  init: init\n});\nexports.preset = init.call(CodecBase.preset);\n\nfunction getDecoder(options) {\n  var readToken = ReadToken.getReadToken(options);\n  return decode;\n\n  function decode(decoder) {\n    var type = readUint8(decoder);\n    var func = readToken[type];\n    if (!func) throw new Error(\"Invalid type: \" + (type ? \"0x\" + type.toString(16) : type));\n    return func(decoder);\n  }\n}\n\nfunction init() {\n  var options = this.options;\n  this.decode = getDecoder(options);\n\n  if (options && options.preset) {\n    ExtUnpacker.setExtUnpackers(this);\n  }\n\n  return this;\n}\n\nfunction addExtUnpacker(etype, unpacker) {\n  var unpackers = this.extUnpackers || (this.extUnpackers = []);\n  unpackers[etype] = CodecBase.filter(unpacker);\n}\n\nfunction getExtUnpacker(type) {\n  var unpackers = this.extUnpackers || (this.extUnpackers = []);\n  return unpackers[type] || extUnpacker;\n\n  function extUnpacker(buffer) {\n    return new ExtBuffer(buffer, type);\n  }\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/read-core.js"],"names":["ExtBuffer","require","ExtUnpacker","readUint8","ReadToken","CodecBase","install","addExtUnpacker","getExtUnpacker","init","exports","preset","call","getDecoder","options","readToken","getReadToken","decode","decoder","type","func","Error","toString","setExtUnpackers","etype","unpacker","unpackers","extUnpackers","filter","extUnpacker","buffer"],"mappings":"AAAA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,SAAxC;;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,SAAzC;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAvB;;AAEAI,SAAS,CAACC,OAAV,CAAkB;AAChBC,EAAAA,cAAc,EAAEA,cADA;AAEhBC,EAAAA,cAAc,EAAEA,cAFA;AAGhBC,EAAAA,IAAI,EAAEA;AAHU,CAAlB;AAMAC,OAAO,CAACC,MAAR,GAAiBF,IAAI,CAACG,IAAL,CAAUP,SAAS,CAACM,MAApB,CAAjB;;AAEA,SAASE,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,SAAS,GAAGX,SAAS,CAACY,YAAV,CAAuBF,OAAvB,CAAhB;AACA,SAAOG,MAAP;;AAEA,WAASA,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,QAAIC,IAAI,GAAGhB,SAAS,CAACe,OAAD,CAApB;AACA,QAAIE,IAAI,GAAGL,SAAS,CAACI,IAAD,CAApB;AACA,QAAI,CAACC,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,oBAAoBF,IAAI,GAAI,OAAOA,IAAI,CAACG,QAAL,CAAc,EAAd,CAAX,GAAgCH,IAAxD,CAAV,CAAN;AACX,WAAOC,IAAI,CAACF,OAAD,CAAX;AACD;AACF;;AAED,SAAST,IAAT,GAAgB;AACd,MAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,OAAKG,MAAL,GAAcJ,UAAU,CAACC,OAAD,CAAxB;;AAEA,MAAIA,OAAO,IAAIA,OAAO,CAACH,MAAvB,EAA+B;AAC7BT,IAAAA,WAAW,CAACqB,eAAZ,CAA4B,IAA5B;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAAShB,cAAT,CAAwBiB,KAAxB,EAA+BC,QAA/B,EAAyC;AACvC,MAAIC,SAAS,GAAG,KAAKC,YAAL,KAAsB,KAAKA,YAAL,GAAoB,EAA1C,CAAhB;AACAD,EAAAA,SAAS,CAACF,KAAD,CAAT,GAAmBnB,SAAS,CAACuB,MAAV,CAAiBH,QAAjB,CAAnB;AACD;;AAED,SAASjB,cAAT,CAAwBW,IAAxB,EAA8B;AAC5B,MAAIO,SAAS,GAAG,KAAKC,YAAL,KAAsB,KAAKA,YAAL,GAAoB,EAA1C,CAAhB;AACA,SAAOD,SAAS,CAACP,IAAD,CAAT,IAAmBU,WAA1B;;AAEA,WAASA,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,WAAO,IAAI9B,SAAJ,CAAc8B,MAAd,EAAsBX,IAAtB,CAAP;AACD;AACF","sourcesContent":["// read-core.js\n\nvar ExtBuffer = require(\"./ext-buffer\").ExtBuffer;\nvar ExtUnpacker = require(\"./ext-unpacker\");\nvar readUint8 = require(\"./read-format\").readUint8;\nvar ReadToken = require(\"./read-token\");\nvar CodecBase = require(\"./codec-base\");\n\nCodecBase.install({\n  addExtUnpacker: addExtUnpacker,\n  getExtUnpacker: getExtUnpacker,\n  init: init\n});\n\nexports.preset = init.call(CodecBase.preset);\n\nfunction getDecoder(options) {\n  var readToken = ReadToken.getReadToken(options);\n  return decode;\n\n  function decode(decoder) {\n    var type = readUint8(decoder);\n    var func = readToken[type];\n    if (!func) throw new Error(\"Invalid type: \" + (type ? (\"0x\" + type.toString(16)) : type));\n    return func(decoder);\n  }\n}\n\nfunction init() {\n  var options = this.options;\n  this.decode = getDecoder(options);\n\n  if (options && options.preset) {\n    ExtUnpacker.setExtUnpackers(this);\n  }\n\n  return this;\n}\n\nfunction addExtUnpacker(etype, unpacker) {\n  var unpackers = this.extUnpackers || (this.extUnpackers = []);\n  unpackers[etype] = CodecBase.filter(unpacker);\n}\n\nfunction getExtUnpacker(type) {\n  var unpackers = this.extUnpackers || (this.extUnpackers = []);\n  return unpackers[type] || extUnpacker;\n\n  function extUnpacker(buffer) {\n    return new ExtBuffer(buffer, type);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}