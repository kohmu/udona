{"ast":null,"code":"// write-token.js\nvar ieee754 = require(\"ieee754\");\n\nvar Int64Buffer = require(\"int64-buffer\");\n\nvar Uint64BE = Int64Buffer.Uint64BE;\nvar Int64BE = Int64Buffer.Int64BE;\n\nvar uint8 = require(\"./write-uint8\").uint8;\n\nvar Bufferish = require(\"./bufferish\");\n\nvar Buffer = Bufferish.global;\nvar IS_BUFFER_SHIM = Bufferish.hasBuffer && \"TYPED_ARRAY_SUPPORT\" in Buffer;\nvar NO_TYPED_ARRAY = IS_BUFFER_SHIM && !Buffer.TYPED_ARRAY_SUPPORT;\nvar Buffer_prototype = Bufferish.hasBuffer && Buffer.prototype || {};\nexports.getWriteToken = getWriteToken;\n\nfunction getWriteToken(options) {\n  if (options && options.uint8array) {\n    return init_uint8array();\n  } else if (NO_TYPED_ARRAY || Bufferish.hasBuffer && options && options.safe) {\n    return init_safe();\n  } else {\n    return init_token();\n  }\n}\n\nfunction init_uint8array() {\n  var token = init_token(); // float 32 -- 0xca\n  // float 64 -- 0xcb\n\n  token[0xca] = writeN(0xca, 4, writeFloatBE);\n  token[0xcb] = writeN(0xcb, 8, writeDoubleBE);\n  return token;\n} // Node.js and browsers with TypedArray\n\n\nfunction init_token() {\n  // (immediate values)\n  // positive fixint -- 0x00 - 0x7f\n  // nil -- 0xc0\n  // false -- 0xc2\n  // true -- 0xc3\n  // negative fixint -- 0xe0 - 0xff\n  var token = uint8.slice(); // bin 8 -- 0xc4\n  // bin 16 -- 0xc5\n  // bin 32 -- 0xc6\n\n  token[0xc4] = write1(0xc4);\n  token[0xc5] = write2(0xc5);\n  token[0xc6] = write4(0xc6); // ext 8 -- 0xc7\n  // ext 16 -- 0xc8\n  // ext 32 -- 0xc9\n\n  token[0xc7] = write1(0xc7);\n  token[0xc8] = write2(0xc8);\n  token[0xc9] = write4(0xc9); // float 32 -- 0xca\n  // float 64 -- 0xcb\n\n  token[0xca] = writeN(0xca, 4, Buffer_prototype.writeFloatBE || writeFloatBE, true);\n  token[0xcb] = writeN(0xcb, 8, Buffer_prototype.writeDoubleBE || writeDoubleBE, true); // uint 8 -- 0xcc\n  // uint 16 -- 0xcd\n  // uint 32 -- 0xce\n  // uint 64 -- 0xcf\n\n  token[0xcc] = write1(0xcc);\n  token[0xcd] = write2(0xcd);\n  token[0xce] = write4(0xce);\n  token[0xcf] = writeN(0xcf, 8, writeUInt64BE); // int 8 -- 0xd0\n  // int 16 -- 0xd1\n  // int 32 -- 0xd2\n  // int 64 -- 0xd3\n\n  token[0xd0] = write1(0xd0);\n  token[0xd1] = write2(0xd1);\n  token[0xd2] = write4(0xd2);\n  token[0xd3] = writeN(0xd3, 8, writeInt64BE); // str 8 -- 0xd9\n  // str 16 -- 0xda\n  // str 32 -- 0xdb\n\n  token[0xd9] = write1(0xd9);\n  token[0xda] = write2(0xda);\n  token[0xdb] = write4(0xdb); // array 16 -- 0xdc\n  // array 32 -- 0xdd\n\n  token[0xdc] = write2(0xdc);\n  token[0xdd] = write4(0xdd); // map 16 -- 0xde\n  // map 32 -- 0xdf\n\n  token[0xde] = write2(0xde);\n  token[0xdf] = write4(0xdf);\n  return token;\n} // safe mode: for old browsers and who needs asserts\n\n\nfunction init_safe() {\n  // (immediate values)\n  // positive fixint -- 0x00 - 0x7f\n  // nil -- 0xc0\n  // false -- 0xc2\n  // true -- 0xc3\n  // negative fixint -- 0xe0 - 0xff\n  var token = uint8.slice(); // bin 8 -- 0xc4\n  // bin 16 -- 0xc5\n  // bin 32 -- 0xc6\n\n  token[0xc4] = writeN(0xc4, 1, Buffer.prototype.writeUInt8);\n  token[0xc5] = writeN(0xc5, 2, Buffer.prototype.writeUInt16BE);\n  token[0xc6] = writeN(0xc6, 4, Buffer.prototype.writeUInt32BE); // ext 8 -- 0xc7\n  // ext 16 -- 0xc8\n  // ext 32 -- 0xc9\n\n  token[0xc7] = writeN(0xc7, 1, Buffer.prototype.writeUInt8);\n  token[0xc8] = writeN(0xc8, 2, Buffer.prototype.writeUInt16BE);\n  token[0xc9] = writeN(0xc9, 4, Buffer.prototype.writeUInt32BE); // float 32 -- 0xca\n  // float 64 -- 0xcb\n\n  token[0xca] = writeN(0xca, 4, Buffer.prototype.writeFloatBE);\n  token[0xcb] = writeN(0xcb, 8, Buffer.prototype.writeDoubleBE); // uint 8 -- 0xcc\n  // uint 16 -- 0xcd\n  // uint 32 -- 0xce\n  // uint 64 -- 0xcf\n\n  token[0xcc] = writeN(0xcc, 1, Buffer.prototype.writeUInt8);\n  token[0xcd] = writeN(0xcd, 2, Buffer.prototype.writeUInt16BE);\n  token[0xce] = writeN(0xce, 4, Buffer.prototype.writeUInt32BE);\n  token[0xcf] = writeN(0xcf, 8, writeUInt64BE); // int 8 -- 0xd0\n  // int 16 -- 0xd1\n  // int 32 -- 0xd2\n  // int 64 -- 0xd3\n\n  token[0xd0] = writeN(0xd0, 1, Buffer.prototype.writeInt8);\n  token[0xd1] = writeN(0xd1, 2, Buffer.prototype.writeInt16BE);\n  token[0xd2] = writeN(0xd2, 4, Buffer.prototype.writeInt32BE);\n  token[0xd3] = writeN(0xd3, 8, writeInt64BE); // str 8 -- 0xd9\n  // str 16 -- 0xda\n  // str 32 -- 0xdb\n\n  token[0xd9] = writeN(0xd9, 1, Buffer.prototype.writeUInt8);\n  token[0xda] = writeN(0xda, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdb] = writeN(0xdb, 4, Buffer.prototype.writeUInt32BE); // array 16 -- 0xdc\n  // array 32 -- 0xdd\n\n  token[0xdc] = writeN(0xdc, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdd] = writeN(0xdd, 4, Buffer.prototype.writeUInt32BE); // map 16 -- 0xde\n  // map 32 -- 0xdf\n\n  token[0xde] = writeN(0xde, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdf] = writeN(0xdf, 4, Buffer.prototype.writeUInt32BE);\n  return token;\n}\n\nfunction write1(type) {\n  return function (encoder, value) {\n    var offset = encoder.reserve(2);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset] = value;\n  };\n}\n\nfunction write2(type) {\n  return function (encoder, value) {\n    var offset = encoder.reserve(3);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset++] = value >>> 8;\n    buffer[offset] = value;\n  };\n}\n\nfunction write4(type) {\n  return function (encoder, value) {\n    var offset = encoder.reserve(5);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset++] = value >>> 24;\n    buffer[offset++] = value >>> 16;\n    buffer[offset++] = value >>> 8;\n    buffer[offset] = value;\n  };\n}\n\nfunction writeN(type, len, method, noAssert) {\n  return function (encoder, value) {\n    var offset = encoder.reserve(len + 1);\n    encoder.buffer[offset++] = type;\n    method.call(encoder.buffer, value, offset, noAssert);\n  };\n}\n\nfunction writeUInt64BE(value, offset) {\n  new Uint64BE(this, offset, value);\n}\n\nfunction writeInt64BE(value, offset) {\n  new Int64BE(this, offset, value);\n}\n\nfunction writeFloatBE(value, offset) {\n  ieee754.write(this, value, offset, false, 23, 4);\n}\n\nfunction writeDoubleBE(value, offset) {\n  ieee754.write(this, value, offset, false, 52, 8);\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/write-token.js"],"names":["ieee754","require","Int64Buffer","Uint64BE","Int64BE","uint8","Bufferish","Buffer","global","IS_BUFFER_SHIM","hasBuffer","NO_TYPED_ARRAY","TYPED_ARRAY_SUPPORT","Buffer_prototype","prototype","exports","getWriteToken","options","uint8array","init_uint8array","safe","init_safe","init_token","token","writeN","writeFloatBE","writeDoubleBE","slice","write1","write2","write4","writeUInt64BE","writeInt64BE","writeUInt8","writeUInt16BE","writeUInt32BE","writeInt8","writeInt16BE","writeInt32BE","type","encoder","value","offset","reserve","buffer","len","method","noAssert","call","write"],"mappings":"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","sourcesContent":["// write-token.js\n\nvar ieee754 = require(\"ieee754\");\nvar Int64Buffer = require(\"int64-buffer\");\nvar Uint64BE = Int64Buffer.Uint64BE;\nvar Int64BE = Int64Buffer.Int64BE;\n\nvar uint8 = require(\"./write-uint8\").uint8;\nvar Bufferish = require(\"./bufferish\");\nvar Buffer = Bufferish.global;\nvar IS_BUFFER_SHIM = Bufferish.hasBuffer && (\"TYPED_ARRAY_SUPPORT\" in Buffer);\nvar NO_TYPED_ARRAY = IS_BUFFER_SHIM && !Buffer.TYPED_ARRAY_SUPPORT;\nvar Buffer_prototype = Bufferish.hasBuffer && Buffer.prototype || {};\n\nexports.getWriteToken = getWriteToken;\n\nfunction getWriteToken(options) {\n  if (options && options.uint8array) {\n    return init_uint8array();\n  } else if (NO_TYPED_ARRAY || (Bufferish.hasBuffer && options && options.safe)) {\n    return init_safe();\n  } else {\n    return init_token();\n  }\n}\n\nfunction init_uint8array() {\n  var token = init_token();\n\n  // float 32 -- 0xca\n  // float 64 -- 0xcb\n  token[0xca] = writeN(0xca, 4, writeFloatBE);\n  token[0xcb] = writeN(0xcb, 8, writeDoubleBE);\n\n  return token;\n}\n\n// Node.js and browsers with TypedArray\n\nfunction init_token() {\n  // (immediate values)\n  // positive fixint -- 0x00 - 0x7f\n  // nil -- 0xc0\n  // false -- 0xc2\n  // true -- 0xc3\n  // negative fixint -- 0xe0 - 0xff\n  var token = uint8.slice();\n\n  // bin 8 -- 0xc4\n  // bin 16 -- 0xc5\n  // bin 32 -- 0xc6\n  token[0xc4] = write1(0xc4);\n  token[0xc5] = write2(0xc5);\n  token[0xc6] = write4(0xc6);\n\n  // ext 8 -- 0xc7\n  // ext 16 -- 0xc8\n  // ext 32 -- 0xc9\n  token[0xc7] = write1(0xc7);\n  token[0xc8] = write2(0xc8);\n  token[0xc9] = write4(0xc9);\n\n  // float 32 -- 0xca\n  // float 64 -- 0xcb\n  token[0xca] = writeN(0xca, 4, (Buffer_prototype.writeFloatBE || writeFloatBE), true);\n  token[0xcb] = writeN(0xcb, 8, (Buffer_prototype.writeDoubleBE || writeDoubleBE), true);\n\n  // uint 8 -- 0xcc\n  // uint 16 -- 0xcd\n  // uint 32 -- 0xce\n  // uint 64 -- 0xcf\n  token[0xcc] = write1(0xcc);\n  token[0xcd] = write2(0xcd);\n  token[0xce] = write4(0xce);\n  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);\n\n  // int 8 -- 0xd0\n  // int 16 -- 0xd1\n  // int 32 -- 0xd2\n  // int 64 -- 0xd3\n  token[0xd0] = write1(0xd0);\n  token[0xd1] = write2(0xd1);\n  token[0xd2] = write4(0xd2);\n  token[0xd3] = writeN(0xd3, 8, writeInt64BE);\n\n  // str 8 -- 0xd9\n  // str 16 -- 0xda\n  // str 32 -- 0xdb\n  token[0xd9] = write1(0xd9);\n  token[0xda] = write2(0xda);\n  token[0xdb] = write4(0xdb);\n\n  // array 16 -- 0xdc\n  // array 32 -- 0xdd\n  token[0xdc] = write2(0xdc);\n  token[0xdd] = write4(0xdd);\n\n  // map 16 -- 0xde\n  // map 32 -- 0xdf\n  token[0xde] = write2(0xde);\n  token[0xdf] = write4(0xdf);\n\n  return token;\n}\n\n// safe mode: for old browsers and who needs asserts\n\nfunction init_safe() {\n  // (immediate values)\n  // positive fixint -- 0x00 - 0x7f\n  // nil -- 0xc0\n  // false -- 0xc2\n  // true -- 0xc3\n  // negative fixint -- 0xe0 - 0xff\n  var token = uint8.slice();\n\n  // bin 8 -- 0xc4\n  // bin 16 -- 0xc5\n  // bin 32 -- 0xc6\n  token[0xc4] = writeN(0xc4, 1, Buffer.prototype.writeUInt8);\n  token[0xc5] = writeN(0xc5, 2, Buffer.prototype.writeUInt16BE);\n  token[0xc6] = writeN(0xc6, 4, Buffer.prototype.writeUInt32BE);\n\n  // ext 8 -- 0xc7\n  // ext 16 -- 0xc8\n  // ext 32 -- 0xc9\n  token[0xc7] = writeN(0xc7, 1, Buffer.prototype.writeUInt8);\n  token[0xc8] = writeN(0xc8, 2, Buffer.prototype.writeUInt16BE);\n  token[0xc9] = writeN(0xc9, 4, Buffer.prototype.writeUInt32BE);\n\n  // float 32 -- 0xca\n  // float 64 -- 0xcb\n  token[0xca] = writeN(0xca, 4, Buffer.prototype.writeFloatBE);\n  token[0xcb] = writeN(0xcb, 8, Buffer.prototype.writeDoubleBE);\n\n  // uint 8 -- 0xcc\n  // uint 16 -- 0xcd\n  // uint 32 -- 0xce\n  // uint 64 -- 0xcf\n  token[0xcc] = writeN(0xcc, 1, Buffer.prototype.writeUInt8);\n  token[0xcd] = writeN(0xcd, 2, Buffer.prototype.writeUInt16BE);\n  token[0xce] = writeN(0xce, 4, Buffer.prototype.writeUInt32BE);\n  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);\n\n  // int 8 -- 0xd0\n  // int 16 -- 0xd1\n  // int 32 -- 0xd2\n  // int 64 -- 0xd3\n  token[0xd0] = writeN(0xd0, 1, Buffer.prototype.writeInt8);\n  token[0xd1] = writeN(0xd1, 2, Buffer.prototype.writeInt16BE);\n  token[0xd2] = writeN(0xd2, 4, Buffer.prototype.writeInt32BE);\n  token[0xd3] = writeN(0xd3, 8, writeInt64BE);\n\n  // str 8 -- 0xd9\n  // str 16 -- 0xda\n  // str 32 -- 0xdb\n  token[0xd9] = writeN(0xd9, 1, Buffer.prototype.writeUInt8);\n  token[0xda] = writeN(0xda, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdb] = writeN(0xdb, 4, Buffer.prototype.writeUInt32BE);\n\n  // array 16 -- 0xdc\n  // array 32 -- 0xdd\n  token[0xdc] = writeN(0xdc, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdd] = writeN(0xdd, 4, Buffer.prototype.writeUInt32BE);\n\n  // map 16 -- 0xde\n  // map 32 -- 0xdf\n  token[0xde] = writeN(0xde, 2, Buffer.prototype.writeUInt16BE);\n  token[0xdf] = writeN(0xdf, 4, Buffer.prototype.writeUInt32BE);\n\n  return token;\n}\n\nfunction write1(type) {\n  return function(encoder, value) {\n    var offset = encoder.reserve(2);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset] = value;\n  };\n}\n\nfunction write2(type) {\n  return function(encoder, value) {\n    var offset = encoder.reserve(3);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset++] = value >>> 8;\n    buffer[offset] = value;\n  };\n}\n\nfunction write4(type) {\n  return function(encoder, value) {\n    var offset = encoder.reserve(5);\n    var buffer = encoder.buffer;\n    buffer[offset++] = type;\n    buffer[offset++] = value >>> 24;\n    buffer[offset++] = value >>> 16;\n    buffer[offset++] = value >>> 8;\n    buffer[offset] = value;\n  };\n}\n\nfunction writeN(type, len, method, noAssert) {\n  return function(encoder, value) {\n    var offset = encoder.reserve(len + 1);\n    encoder.buffer[offset++] = type;\n    method.call(encoder.buffer, value, offset, noAssert);\n  };\n}\n\nfunction writeUInt64BE(value, offset) {\n  new Uint64BE(this, offset, value);\n}\n\nfunction writeInt64BE(value, offset) {\n  new Int64BE(this, offset, value);\n}\n\nfunction writeFloatBE(value, offset) {\n  ieee754.write(this, value, offset, false, 23, 4);\n}\n\nfunction writeDoubleBE(value, offset) {\n  ieee754.write(this, value, offset, false, 52, 8);\n}\n"]},"metadata":{},"sourceType":"script"}