{"ast":null,"code":"// codec-base.js\nvar IS_ARRAY = require(\"isarray\");\n\nexports.createCodec = createCodec;\nexports.install = install;\nexports.filter = filter;\n\nvar Bufferish = require(\"./bufferish\");\n\nfunction Codec(options) {\n  if (!(this instanceof Codec)) return new Codec(options);\n  this.options = options;\n  this.init();\n}\n\nCodec.prototype.init = function () {\n  var options = this.options;\n\n  if (options && options.uint8array) {\n    this.bufferish = Bufferish.Uint8Array;\n  }\n\n  return this;\n};\n\nfunction install(props) {\n  for (var key in props) {\n    Codec.prototype[key] = add(Codec.prototype[key], props[key]);\n  }\n}\n\nfunction add(a, b) {\n  return a && b ? ab : a || b;\n\n  function ab() {\n    a.apply(this, arguments);\n    return b.apply(this, arguments);\n  }\n}\n\nfunction join(filters) {\n  filters = filters.slice();\n  return function (value) {\n    return filters.reduce(iterator, value);\n  };\n\n  function iterator(value, filter) {\n    return filter(value);\n  }\n}\n\nfunction filter(filter) {\n  return IS_ARRAY(filter) ? join(filter) : filter;\n} // @public\n// msgpack.createCodec()\n\n\nfunction createCodec(options) {\n  return new Codec(options);\n} // default shared codec\n\n\nexports.preset = createCodec({\n  preset: true\n});","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/codec-base.js"],"names":["IS_ARRAY","require","exports","createCodec","install","filter","Bufferish","Codec","options","init","prototype","uint8array","bufferish","Uint8Array","props","key","add","a","b","ab","apply","arguments","join","filters","slice","value","reduce","iterator","preset"],"mappings":"AAAA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEAC,OAAO,CAACC,WAAR,GAAsBA,WAAtB;AACAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,MAAR,GAAiBA,MAAjB;;AAEA,IAAIC,SAAS,GAAGL,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASM,KAAT,CAAeC,OAAf,EAAwB;AACtB,MAAI,EAAE,gBAAgBD,KAAlB,CAAJ,EAA8B,OAAO,IAAIA,KAAJ,CAAUC,OAAV,CAAP;AAC9B,OAAKA,OAAL,GAAeA,OAAf;AACA,OAAKC,IAAL;AACD;;AAEDF,KAAK,CAACG,SAAN,CAAgBD,IAAhB,GAAuB,YAAW;AAChC,MAAID,OAAO,GAAG,KAAKA,OAAnB;;AAEA,MAAIA,OAAO,IAAIA,OAAO,CAACG,UAAvB,EAAmC;AACjC,SAAKC,SAAL,GAAiBN,SAAS,CAACO,UAA3B;AACD;;AAED,SAAO,IAAP;AACD,CARD;;AAUA,SAAST,OAAT,CAAiBU,KAAjB,EAAwB;AACtB,OAAK,IAAIC,GAAT,IAAgBD,KAAhB,EAAuB;AACrBP,IAAAA,KAAK,CAACG,SAAN,CAAgBK,GAAhB,IAAuBC,GAAG,CAACT,KAAK,CAACG,SAAN,CAAgBK,GAAhB,CAAD,EAAuBD,KAAK,CAACC,GAAD,CAA5B,CAA1B;AACD;AACF;;AAED,SAASC,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACjB,SAAQD,CAAC,IAAIC,CAAN,GAAWC,EAAX,GAAiBF,CAAC,IAAIC,CAA7B;;AAEA,WAASC,EAAT,GAAc;AACZF,IAAAA,CAAC,CAACG,KAAF,CAAQ,IAAR,EAAcC,SAAd;AACA,WAAOH,CAAC,CAACE,KAAF,CAAQ,IAAR,EAAcC,SAAd,CAAP;AACD;AACF;;AAED,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrBA,EAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,EAAV;AAEA,SAAO,UAASC,KAAT,EAAgB;AACrB,WAAOF,OAAO,CAACG,MAAR,CAAeC,QAAf,EAAyBF,KAAzB,CAAP;AACD,GAFD;;AAIA,WAASE,QAAT,CAAkBF,KAAlB,EAAyBpB,MAAzB,EAAiC;AAC/B,WAAOA,MAAM,CAACoB,KAAD,CAAb;AACD;AACF;;AAED,SAASpB,MAAT,CAAgBA,MAAhB,EAAwB;AACtB,SAAOL,QAAQ,CAACK,MAAD,CAAR,GAAmBiB,IAAI,CAACjB,MAAD,CAAvB,GAAkCA,MAAzC;AACD,C,CAED;AACA;;;AAEA,SAASF,WAAT,CAAqBK,OAArB,EAA8B;AAC5B,SAAO,IAAID,KAAJ,CAAUC,OAAV,CAAP;AACD,C,CAED;;;AAEAN,OAAO,CAAC0B,MAAR,GAAiBzB,WAAW,CAAC;AAACyB,EAAAA,MAAM,EAAE;AAAT,CAAD,CAA5B","sourcesContent":["// codec-base.js\n\nvar IS_ARRAY = require(\"isarray\");\n\nexports.createCodec = createCodec;\nexports.install = install;\nexports.filter = filter;\n\nvar Bufferish = require(\"./bufferish\");\n\nfunction Codec(options) {\n  if (!(this instanceof Codec)) return new Codec(options);\n  this.options = options;\n  this.init();\n}\n\nCodec.prototype.init = function() {\n  var options = this.options;\n\n  if (options && options.uint8array) {\n    this.bufferish = Bufferish.Uint8Array;\n  }\n\n  return this;\n};\n\nfunction install(props) {\n  for (var key in props) {\n    Codec.prototype[key] = add(Codec.prototype[key], props[key]);\n  }\n}\n\nfunction add(a, b) {\n  return (a && b) ? ab : (a || b);\n\n  function ab() {\n    a.apply(this, arguments);\n    return b.apply(this, arguments);\n  }\n}\n\nfunction join(filters) {\n  filters = filters.slice();\n\n  return function(value) {\n    return filters.reduce(iterator, value);\n  };\n\n  function iterator(value, filter) {\n    return filter(value);\n  }\n}\n\nfunction filter(filter) {\n  return IS_ARRAY(filter) ? join(filter) : filter;\n}\n\n// @public\n// msgpack.createCodec()\n\nfunction createCodec(options) {\n  return new Codec(options);\n}\n\n// default shared codec\n\nexports.preset = createCodec({preset: true});\n"]},"metadata":{},"sourceType":"script"}