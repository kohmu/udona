{"ast":null,"code":"// bufferish-proto.js\n\n/* jshint eqnull:true */\nvar BufferLite = require(\"./buffer-lite\");\n\nexports.copy = copy;\nexports.slice = slice;\nexports.toString = toString;\nexports.write = gen(\"write\");\n\nvar Bufferish = require(\"./bufferish\");\n\nvar Buffer = Bufferish.global;\nvar isBufferShim = Bufferish.hasBuffer && \"TYPED_ARRAY_SUPPORT\" in Buffer;\nvar brokenTypedArray = isBufferShim && !Buffer.TYPED_ARRAY_SUPPORT;\n/**\n * @param target {Buffer|Uint8Array|Array}\n * @param [targetStart] {Number}\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction copy(target, targetStart, start, end) {\n  var thisIsBuffer = Bufferish.isBuffer(this);\n  var targetIsBuffer = Bufferish.isBuffer(target);\n\n  if (thisIsBuffer && targetIsBuffer) {\n    // Buffer to Buffer\n    return this.copy(target, targetStart, start, end);\n  } else if (!brokenTypedArray && !thisIsBuffer && !targetIsBuffer && Bufferish.isView(this) && Bufferish.isView(target)) {\n    // Uint8Array to Uint8Array (except for minor some browsers)\n    var buffer = start || end != null ? slice.call(this, start, end) : this;\n    target.set(buffer, targetStart);\n    return buffer.length;\n  } else {\n    // other cases\n    return BufferLite.copy.call(this, target, targetStart, start, end);\n  }\n}\n/**\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\n\nfunction slice(start, end) {\n  // for Buffer, Uint8Array (except for minor some browsers) and Array\n  var f = this.slice || !brokenTypedArray && this.subarray;\n  if (f) return f.call(this, start, end); // Uint8Array (for minor some browsers)\n\n  var target = Bufferish.alloc.call(this, end - start);\n  copy.call(this, target, 0, start, end);\n  return target;\n}\n/**\n * Buffer.prototype.toString()\n *\n * @param [encoding] {String} ignored\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {String}\n */\n\n\nfunction toString(encoding, start, end) {\n  var f = !isBufferShim && Bufferish.isBuffer(this) ? this.toString : BufferLite.toString;\n  return f.apply(this, arguments);\n}\n/**\n * @private\n */\n\n\nfunction gen(method) {\n  return wrap;\n\n  function wrap() {\n    var f = this[method] || BufferLite[method];\n    return f.apply(this, arguments);\n  }\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/bufferish-proto.js"],"names":["BufferLite","require","exports","copy","slice","toString","write","gen","Bufferish","Buffer","global","isBufferShim","hasBuffer","brokenTypedArray","TYPED_ARRAY_SUPPORT","target","targetStart","start","end","thisIsBuffer","isBuffer","targetIsBuffer","isView","buffer","call","set","length","f","subarray","alloc","encoding","apply","arguments","method","wrap"],"mappings":"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","sourcesContent":["// bufferish-proto.js\n\n/* jshint eqnull:true */\n\nvar BufferLite = require(\"./buffer-lite\");\n\nexports.copy = copy;\nexports.slice = slice;\nexports.toString = toString;\nexports.write = gen(\"write\");\n\nvar Bufferish = require(\"./bufferish\");\nvar Buffer = Bufferish.global;\n\nvar isBufferShim = Bufferish.hasBuffer && (\"TYPED_ARRAY_SUPPORT\" in Buffer);\nvar brokenTypedArray = isBufferShim && !Buffer.TYPED_ARRAY_SUPPORT;\n\n/**\n * @param target {Buffer|Uint8Array|Array}\n * @param [targetStart] {Number}\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction copy(target, targetStart, start, end) {\n  var thisIsBuffer = Bufferish.isBuffer(this);\n  var targetIsBuffer = Bufferish.isBuffer(target);\n  if (thisIsBuffer && targetIsBuffer) {\n    // Buffer to Buffer\n    return this.copy(target, targetStart, start, end);\n  } else if (!brokenTypedArray && !thisIsBuffer && !targetIsBuffer &&\n    Bufferish.isView(this) && Bufferish.isView(target)) {\n    // Uint8Array to Uint8Array (except for minor some browsers)\n    var buffer = (start || end != null) ? slice.call(this, start, end) : this;\n    target.set(buffer, targetStart);\n    return buffer.length;\n  } else {\n    // other cases\n    return BufferLite.copy.call(this, target, targetStart, start, end);\n  }\n}\n\n/**\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction slice(start, end) {\n  // for Buffer, Uint8Array (except for minor some browsers) and Array\n  var f = this.slice || (!brokenTypedArray && this.subarray);\n  if (f) return f.call(this, start, end);\n\n  // Uint8Array (for minor some browsers)\n  var target = Bufferish.alloc.call(this, end - start);\n  copy.call(this, target, 0, start, end);\n  return target;\n}\n\n/**\n * Buffer.prototype.toString()\n *\n * @param [encoding] {String} ignored\n * @param [start] {Number}\n * @param [end] {Number}\n * @returns {String}\n */\n\nfunction toString(encoding, start, end) {\n  var f = (!isBufferShim && Bufferish.isBuffer(this)) ? this.toString : BufferLite.toString;\n  return f.apply(this, arguments);\n}\n\n/**\n * @private\n */\n\nfunction gen(method) {\n  return wrap;\n\n  function wrap() {\n    var f = this[method] || BufferLite[method];\n    return f.apply(this, arguments);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}