{"ast":null,"code":"/**\n * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)\n *\n * @copyright Yusuke Kawasaki\n * @license MIT\n * @constructor\n * @see https://github.com/kawanet/event-lite\n * @see http://kawanet.github.io/event-lite/EventLite.html\n * @example\n * var EventLite = require(\"event-lite\");\n *\n * function MyClass() {...}             // your class\n *\n * EventLite.mixin(MyClass.prototype);  // import event methods\n *\n * var obj = new MyClass();\n * obj.on(\"foo\", function() {...});     // add event listener\n * obj.once(\"bar\", function() {...});   // add one-time event listener\n * obj.emit(\"foo\");                     // dispatch event\n * obj.emit(\"bar\");                     // dispatch another event\n * obj.off(\"foo\");                      // remove event listener\n */\nfunction EventLite() {\n  if (!(this instanceof EventLite)) return new EventLite();\n}\n\n(function (EventLite) {\n  // export the class for node.js\n  if (\"undefined\" !== typeof module) module.exports = EventLite; // property name to hold listeners\n\n  var LISTENERS = \"listeners\"; // methods to export\n\n  var methods = {\n    on: on,\n    once: once,\n    off: off,\n    emit: emit\n  }; // mixin to self\n\n  mixin(EventLite.prototype); // export mixin function\n\n  EventLite.mixin = mixin;\n  /**\n   * Import on(), once(), off() and emit() methods into target object.\n   *\n   * @function EventLite.mixin\n   * @param target {Prototype}\n   */\n\n  function mixin(target) {\n    for (var key in methods) {\n      target[key] = methods[key];\n    }\n\n    return target;\n  }\n  /**\n   * Add an event listener.\n   *\n   * @function EventLite.prototype.on\n   * @param type {string}\n   * @param func {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n\n  function on(type, func) {\n    getListeners(this, type).push(func);\n    return this;\n  }\n  /**\n   * Add one-time event listener.\n   *\n   * @function EventLite.prototype.once\n   * @param type {string}\n   * @param func {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n\n  function once(type, func) {\n    var that = this;\n    wrap.originalListener = func;\n    getListeners(that, type).push(wrap);\n    return that;\n\n    function wrap() {\n      off.call(that, type, wrap);\n      func.apply(this, arguments);\n    }\n  }\n  /**\n   * Remove an event listener.\n   *\n   * @function EventLite.prototype.off\n   * @param [type] {string}\n   * @param [func] {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n\n  function off(type, func) {\n    var that = this;\n    var listners;\n\n    if (!arguments.length) {\n      delete that[LISTENERS];\n    } else if (!func) {\n      listners = that[LISTENERS];\n\n      if (listners) {\n        delete listners[type];\n        if (!Object.keys(listners).length) return off.call(that);\n      }\n    } else {\n      listners = getListeners(that, type, true);\n\n      if (listners) {\n        listners = listners.filter(ne);\n        if (!listners.length) return off.call(that, type);\n        that[LISTENERS][type] = listners;\n      }\n    }\n\n    return that;\n\n    function ne(test) {\n      return test !== func && test.originalListener !== func;\n    }\n  }\n  /**\n   * Dispatch (trigger) an event.\n   *\n   * @function EventLite.prototype.emit\n   * @param type {string}\n   * @param [value] {*}\n   * @returns {boolean} True when a listener received the event\n   */\n\n\n  function emit(type, value) {\n    var that = this;\n    var listeners = getListeners(that, type, true);\n    if (!listeners) return false;\n    var arglen = arguments.length;\n\n    if (arglen === 1) {\n      listeners.forEach(zeroarg);\n    } else if (arglen === 2) {\n      listeners.forEach(onearg);\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      listeners.forEach(moreargs);\n    }\n\n    return !!listeners.length;\n\n    function zeroarg(func) {\n      func.call(that);\n    }\n\n    function onearg(func) {\n      func.call(that, value);\n    }\n\n    function moreargs(func) {\n      func.apply(that, args);\n    }\n  }\n  /**\n   * @ignore\n   */\n\n\n  function getListeners(that, type, readonly) {\n    if (readonly && !that[LISTENERS]) return;\n    var listeners = that[LISTENERS] || (that[LISTENERS] = {});\n    return listeners[type] || (listeners[type] = []);\n  }\n})(EventLite);","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/event-lite/event-lite.js"],"names":["EventLite","module","exports","LISTENERS","methods","on","once","off","emit","mixin","prototype","target","key","type","func","getListeners","push","that","wrap","originalListener","call","apply","arguments","listners","length","Object","keys","filter","ne","test","value","listeners","arglen","forEach","zeroarg","onearg","args","Array","slice","moreargs","readonly"],"mappings":"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","sourcesContent":["/**\n * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)\n *\n * @copyright Yusuke Kawasaki\n * @license MIT\n * @constructor\n * @see https://github.com/kawanet/event-lite\n * @see http://kawanet.github.io/event-lite/EventLite.html\n * @example\n * var EventLite = require(\"event-lite\");\n *\n * function MyClass() {...}             // your class\n *\n * EventLite.mixin(MyClass.prototype);  // import event methods\n *\n * var obj = new MyClass();\n * obj.on(\"foo\", function() {...});     // add event listener\n * obj.once(\"bar\", function() {...});   // add one-time event listener\n * obj.emit(\"foo\");                     // dispatch event\n * obj.emit(\"bar\");                     // dispatch another event\n * obj.off(\"foo\");                      // remove event listener\n */\n\nfunction EventLite() {\n  if (!(this instanceof EventLite)) return new EventLite();\n}\n\n(function(EventLite) {\n  // export the class for node.js\n  if (\"undefined\" !== typeof module) module.exports = EventLite;\n\n  // property name to hold listeners\n  var LISTENERS = \"listeners\";\n\n  // methods to export\n  var methods = {\n    on: on,\n    once: once,\n    off: off,\n    emit: emit\n  };\n\n  // mixin to self\n  mixin(EventLite.prototype);\n\n  // export mixin function\n  EventLite.mixin = mixin;\n\n  /**\n   * Import on(), once(), off() and emit() methods into target object.\n   *\n   * @function EventLite.mixin\n   * @param target {Prototype}\n   */\n\n  function mixin(target) {\n    for (var key in methods) {\n      target[key] = methods[key];\n    }\n    return target;\n  }\n\n  /**\n   * Add an event listener.\n   *\n   * @function EventLite.prototype.on\n   * @param type {string}\n   * @param func {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n  function on(type, func) {\n    getListeners(this, type).push(func);\n    return this;\n  }\n\n  /**\n   * Add one-time event listener.\n   *\n   * @function EventLite.prototype.once\n   * @param type {string}\n   * @param func {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n  function once(type, func) {\n    var that = this;\n    wrap.originalListener = func;\n    getListeners(that, type).push(wrap);\n    return that;\n\n    function wrap() {\n      off.call(that, type, wrap);\n      func.apply(this, arguments);\n    }\n  }\n\n  /**\n   * Remove an event listener.\n   *\n   * @function EventLite.prototype.off\n   * @param [type] {string}\n   * @param [func] {Function}\n   * @returns {EventLite} Self for method chaining\n   */\n\n  function off(type, func) {\n    var that = this;\n    var listners;\n    if (!arguments.length) {\n      delete that[LISTENERS];\n    } else if (!func) {\n      listners = that[LISTENERS];\n      if (listners) {\n        delete listners[type];\n        if (!Object.keys(listners).length) return off.call(that);\n      }\n    } else {\n      listners = getListeners(that, type, true);\n      if (listners) {\n        listners = listners.filter(ne);\n        if (!listners.length) return off.call(that, type);\n        that[LISTENERS][type] = listners;\n      }\n    }\n    return that;\n\n    function ne(test) {\n      return test !== func && test.originalListener !== func;\n    }\n  }\n\n  /**\n   * Dispatch (trigger) an event.\n   *\n   * @function EventLite.prototype.emit\n   * @param type {string}\n   * @param [value] {*}\n   * @returns {boolean} True when a listener received the event\n   */\n\n  function emit(type, value) {\n    var that = this;\n    var listeners = getListeners(that, type, true);\n    if (!listeners) return false;\n    var arglen = arguments.length;\n    if (arglen === 1) {\n      listeners.forEach(zeroarg);\n    } else if (arglen === 2) {\n      listeners.forEach(onearg);\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      listeners.forEach(moreargs);\n    }\n    return !!listeners.length;\n\n    function zeroarg(func) {\n      func.call(that);\n    }\n\n    function onearg(func) {\n      func.call(that, value);\n    }\n\n    function moreargs(func) {\n      func.apply(that, args);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n\n  function getListeners(that, type, readonly) {\n    if (readonly && !that[LISTENERS]) return;\n    var listeners = that[LISTENERS] || (that[LISTENERS] = {});\n    return listeners[type] || (listeners[type] = []);\n  }\n\n})(EventLite);\n"]},"metadata":{},"sourceType":"script"}