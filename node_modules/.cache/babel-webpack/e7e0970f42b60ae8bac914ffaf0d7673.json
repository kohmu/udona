{"ast":null,"code":"// bufferish-buffer.js\nvar Bufferish = require(\"./bufferish\");\n\nvar Buffer = Bufferish.global;\nvar exports = module.exports = Bufferish.hasBuffer ? alloc(0) : [];\nexports.alloc = Bufferish.hasBuffer && Buffer.alloc || alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Buffer(size);\n}\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Buffer}\n */\n\n\nfunction from(value) {\n  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {\n    // TypedArray to Uint8Array\n    value = Bufferish.Uint8Array.from(value);\n  } else if (Bufferish.isArrayBuffer(value)) {\n    // ArrayBuffer to Uint8Array\n    value = new Uint8Array(value);\n  } else if (typeof value === \"string\") {\n    // String to Buffer\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  } // Array-like to Buffer\n\n\n  if (Buffer.from && Buffer.from.length !== 1) {\n    return Buffer.from(value); // node v6+\n  } else {\n    return new Buffer(value); // node v4\n  }\n}","map":{"version":3,"sources":["C:/Users/kohmu/udonarium/node_modules/msgpack-lite/lib/bufferish-buffer.js"],"names":["Bufferish","require","Buffer","global","exports","module","hasBuffer","alloc","concat","from","size","value","isBuffer","isView","Uint8Array","isArrayBuffer","call","TypeError","length"],"mappings":"AAAA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGF,SAAS,CAACG,MAAvB;AAEA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBJ,SAAS,CAACM,SAAV,GAAsBC,KAAK,CAAC,CAAD,CAA3B,GAAiC,EAAhE;AAEAH,OAAO,CAACG,KAAR,GAAgBP,SAAS,CAACM,SAAV,IAAuBJ,MAAM,CAACK,KAA9B,IAAuCA,KAAvD;AACAH,OAAO,CAACI,MAAR,GAAiBR,SAAS,CAACQ,MAA3B;AACAJ,OAAO,CAACK,IAAR,GAAeA,IAAf;AAEA;AACA;AACA;AACA;;AAEA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACnB,SAAO,IAAIR,MAAJ,CAAWQ,IAAX,CAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASD,IAAT,CAAcE,KAAd,EAAqB;AACnB,MAAI,CAACX,SAAS,CAACY,QAAV,CAAmBD,KAAnB,CAAD,IAA8BX,SAAS,CAACa,MAAV,CAAiBF,KAAjB,CAAlC,EAA2D;AACzD;AACAA,IAAAA,KAAK,GAAGX,SAAS,CAACc,UAAV,CAAqBL,IAArB,CAA0BE,KAA1B,CAAR;AACD,GAHD,MAGO,IAAIX,SAAS,CAACe,aAAV,CAAwBJ,KAAxB,CAAJ,EAAoC;AACzC;AACAA,IAAAA,KAAK,GAAG,IAAIG,UAAJ,CAAeH,KAAf,CAAR;AACD,GAHM,MAGA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC;AACA,WAAOX,SAAS,CAACS,IAAV,CAAeO,IAAf,CAAoBZ,OAApB,EAA6BO,KAA7B,CAAP;AACD,GAHM,MAGA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,UAAM,IAAIM,SAAJ,CAAc,uCAAd,CAAN;AACD,GAZkB,CAcnB;;;AACA,MAAIf,MAAM,CAACO,IAAP,IAAeP,MAAM,CAACO,IAAP,CAAYS,MAAZ,KAAuB,CAA1C,EAA6C;AAC3C,WAAOhB,MAAM,CAACO,IAAP,CAAYE,KAAZ,CAAP,CAD2C,CAChB;AAC5B,GAFD,MAEO;AACL,WAAO,IAAIT,MAAJ,CAAWS,KAAX,CAAP,CADK,CACqB;AAC3B;AACF","sourcesContent":["// bufferish-buffer.js\n\nvar Bufferish = require(\"./bufferish\");\nvar Buffer = Bufferish.global;\n\nvar exports = module.exports = Bufferish.hasBuffer ? alloc(0) : [];\n\nexports.alloc = Bufferish.hasBuffer && Buffer.alloc || alloc;\nexports.concat = Bufferish.concat;\nexports.from = from;\n\n/**\n * @param size {Number}\n * @returns {Buffer|Uint8Array|Array}\n */\n\nfunction alloc(size) {\n  return new Buffer(size);\n}\n\n/**\n * @param value {Array|ArrayBuffer|Buffer|String}\n * @returns {Buffer}\n */\n\nfunction from(value) {\n  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {\n    // TypedArray to Uint8Array\n    value = Bufferish.Uint8Array.from(value);\n  } else if (Bufferish.isArrayBuffer(value)) {\n    // ArrayBuffer to Uint8Array\n    value = new Uint8Array(value);\n  } else if (typeof value === \"string\") {\n    // String to Buffer\n    return Bufferish.from.call(exports, value);\n  } else if (typeof value === \"number\") {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  // Array-like to Buffer\n  if (Buffer.from && Buffer.from.length !== 1) {\n    return Buffer.from(value); // node v6+\n  } else {\n    return new Buffer(value); // node v4\n  }\n}\n"]},"metadata":{},"sourceType":"script"}