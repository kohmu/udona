diff --git a/src/app/component/dice-symbol/dice-symbol.component.css b/src/app/component/dice-symbol/dice-symbol.component.css
index aca62fd..b46d4af 100644
--- a/src/app/component/dice-symbol/dice-symbol.component.css
+++ b/src/app/component/dice-symbol/dice-symbol.component.css
@@ -98,7 +98,7 @@
   bottom: 0;
   left: 0;
   right: 0;
-  transform: rotateX(-90deg) translateY(-50%);
+  /* transform: rotateX(-90deg) translateY(-50%); */
 }
 
 .is-fit-width {
diff --git a/src/app/component/game-character-sheet/game-character-sheet.component.html b/src/app/component/game-character-sheet/game-character-sheet.component.html
index df0fd45..6154749 100644
--- a/src/app/component/game-character-sheet/game-character-sheet.component.html
+++ b/src/app/component/game-character-sheet/game-character-sheet.component.html
@@ -10,7 +10,7 @@
   </ng-container>
   <ng-container *ngSwitchCase="'terrain'">
     <button (click)="openModal('floor')">床の画像を変更</button>
-    <button (click)="openModal('wall')">壁の画像を変更</button>
+    <!-- <button (click)="openModal('wall')">壁の画像を変更</button> -->
   </ng-container>
   <ng-container *ngSwitchCase="'dice-symbol'">
     <button (click)="openModal(tabletopObject['face'])" [disabled]="!tabletopObject['isVisible']">ダイス目の画像を変更</button>
diff --git a/src/app/component/game-character/game-character.component.css b/src/app/component/game-character/game-character.component.css
index 4daebb8..bb3dc6e 100644
--- a/src/app/component/game-character/game-character.component.css
+++ b/src/app/component/game-character/game-character.component.css
@@ -76,7 +76,7 @@
   width: 100%;
   box-sizing: border-box;
   border: solid 6px #FFCC80;
-  border-radius: 25px;
+  border-radius: 10px;
 }
 
 .pedestal-outer {
@@ -86,7 +86,7 @@
   width: 100%;
   box-sizing: border-box;
   border: solid 2px #212121;
-  border-radius: 25px;
+  border-radius: 10px;
 }
 
 .upright-transform {
@@ -94,7 +94,7 @@
   bottom: 0;
   left: 0;
   right: 0;
-  transform: rotateX(-90deg) translateY(-50%);
+  /* transform: rotateX(-90deg) translateY(-50%); */
 }
 
 .is-fit-width {
diff --git a/src/app/component/game-character/game-character.component.html b/src/app/component/game-character/game-character.component.html
index f195e50..4515a35 100644
--- a/src/app/component/game-character/game-character.component.html
+++ b/src/app/component/game-character/game-character.component.html
@@ -22,6 +22,7 @@
               <div class="back-tag has-length-limit is-3d">{{name}}</div>
             </div>
             <img class="image" *ngIf="0 < imageFile.url.length" [src]="imageFile.url | safe: 'resourceUrl'">
+            <!--
             <div class="grab-group">
               <div class="rotate-grab rotate-grab-icon of-top"
                 [ngStyle]="{'transform': 'translateX(-50%) translateX(' + size * gridSize / 2 +'px)'}">
@@ -32,6 +33,7 @@
                 <i class="material-icons">autorenew</i>
               </div>
             </div>
+            -->
           </div>
         </div>
       </div>
diff --git a/src/app/component/game-table/game-table.component.ts b/src/app/component/game-table/game-table.component.ts
index add0475..694bec3 100644
--- a/src/app/component/game-table/game-table.component.ts
+++ b/src/app/component/game-table/game-table.component.ts
@@ -67,9 +67,9 @@ export class GameTableComponent implements OnInit, OnDestroy, AfterViewInit {
   private viewPotisonY: number = 0;
   private viewPotisonZ: number = 0;
 
-  private viewRotateX: number = 50;
+  private viewRotateX: number = 0;
   private viewRotateY: number = 0;
-  private viewRotateZ: number = 10;
+  private viewRotateZ: number = 0;
 
   private buttonCode: number = 0;
   private input: InputHandler = null;
@@ -320,7 +320,7 @@ export class GameTableComponent implements OnInit, OnDestroy, AfterViewInit {
     this.viewPotisonY += transformY;
     this.viewPotisonZ += transformZ;
 
-    this.gameTable.nativeElement.style.transform = 'translateZ(' + this.viewPotisonZ + 'px) translateY(' + this.viewPotisonY + 'px) translateX(' + this.viewPotisonX + 'px) rotateY(' + this.viewRotateY + 'deg) rotateX(' + this.viewRotateX + 'deg) rotateZ(' + this.viewRotateZ + 'deg) ';
+    this.gameTable.nativeElement.style.transform = 'translateZ(' + this.viewPotisonZ + 'px) translateY(' + this.viewPotisonY + 'px) translateX(' + this.viewPotisonX + 'px) ';
   }
 
   private setGameTableGrid(width: number, height: number, gridSize: number = 50, gridType: GridType = GridType.SQUARE, gridColor: string = '#000000e6') {
diff --git a/src/app/component/peer-cursor/peer-cursor.component.css b/src/app/component/peer-cursor/peer-cursor.component.css
index b03a7d0..fc2ab15 100644
--- a/src/app/component/peer-cursor/peer-cursor.component.css
+++ b/src/app/component/peer-cursor/peer-cursor.component.css
@@ -23,7 +23,7 @@
   border-radius: 50% 50% 5% 50%;
   background-color: rgba(240, 218, 189, 0.9);
   transform-origin: 100% 100%;
-  transform: translateX(-100%) translateY(-100%)  rotateX(-90deg) rotateZ(45deg);
+  transform: translateX(-100%) translateY(-100%) rotate(45deg);
 }
 
 .icon {
diff --git a/src/app/component/terrain/terrain.component.css b/src/app/component/terrain/terrain.component.css
index de9c7c6..0e3a5bd 100644
--- a/src/app/component/terrain/terrain.component.css
+++ b/src/app/component/terrain/terrain.component.css
@@ -56,6 +56,7 @@
 }
 
 .of-wall-top {
+  display: none;
   top: 0px;
   left: 0px;
 
@@ -65,6 +66,7 @@
 }
 
 .of-wall-bottom {
+  display: none;
   bottom: 0px;
   left: 0px;
 
@@ -74,6 +76,7 @@
 }
 
 .of-wall-left {
+  display: none;
   top: 0px;
   left: 0px;
 
@@ -83,6 +86,7 @@
 }
 
 .of-wall-right {
+  display: none;
   top: 0px;
   right: 0px;
 
diff --git a/src/app/component/terrain/terrain.component.html b/src/app/component/terrain/terrain.component.html
index caa02d8..9555df7 100644
--- a/src/app/component/terrain/terrain.component.html
+++ b/src/app/component/terrain/terrain.component.html
@@ -4,7 +4,7 @@
   <div class="component-content is-3d is-pointer-events-auto" [ngClass]="{'is-grab': !isLocked}"
     appRotable [rotable.option]="rotableOption" (rotable.ondragstart)="onMove()" (rotable.ondragend)="onMoved()" [rotable.disable]="isLocked">
     <ng-container *ngIf="hasFloor && isVisibleFloor && 0 < floorImage?.url.length">
-      <div class="texture" [ngClass]="{'blinking-animation': !isLocked}" [ngStyle]="{'transform': 'translateZ(' + height * gridSize +'px)'}"
+      <div class="texture" [ngClass]="{'blinking-animation': !isLocked}"
         [style.background-image]="'url(' + floorImage.url + ')' | safe: 'style'"></div>
     </ng-container>
     <ng-container *ngIf="hasWall && 0 < wallImage?.url.length">
@@ -37,4 +37,4 @@
       </div>
     </ng-container>
   </div>
-</div>
\ No newline at end of file
+</div>
diff --git a/src/app/component/terrain/terrain.component.ts b/src/app/component/terrain/terrain.component.ts
index e14ed5a..259c86f 100644
--- a/src/app/component/terrain/terrain.component.ts
+++ b/src/app/component/terrain/terrain.component.ts
@@ -131,21 +131,21 @@ export class TerrainComponent implements OnInit, OnDestroy, AfterViewInit {
             SoundEffect.play(PresetSound.lock);
           }
         }),
-      ContextMenuSeparator,
-      (this.hasWall
-        ? {
-          name: '壁を非表示', action: () => {
-            this.mode = TerrainViewState.FLOOR;
-            if (this.depth * this.width === 0) {
-              this.terrain.width = this.width <= 0 ? 1 : this.width;
-              this.terrain.depth = this.depth <= 0 ? 1 : this.depth;
-            }
-          }
-        } : {
-          name: '壁を表示', action: () => {
-            this.mode = TerrainViewState.ALL;
-          }
-        }),
+      // ContextMenuSeparator,
+      // (this.hasWall
+      //   ? {
+      //     name: '壁を非表示', action: () => {
+      //       this.mode = TerrainViewState.FLOOR;
+      //       if (this.depth * this.width === 0) {
+      //         this.terrain.width = this.width <= 0 ? 1 : this.width;
+      //         this.terrain.depth = this.depth <= 0 ? 1 : this.depth;
+      //       }
+      //     }
+      //   } : {
+      //     name: '壁を表示', action: () => {
+      //       this.mode = TerrainViewState.ALL;
+      //     }
+      //   }),
       ContextMenuSeparator,
       { name: '地形設定を編集', action: () => { this.showDetail(this.terrain); } },
       {
diff --git a/src/app/component/text-note/text-note.component.css b/src/app/component/text-note/text-note.component.css
index 1f764e8..d1d9c46 100644
--- a/src/app/component/text-note/text-note.component.css
+++ b/src/app/component/text-note/text-note.component.css
@@ -54,7 +54,7 @@
   left: 0;
   right: 0;
   transform-origin: 50% 100%;
-  transform: rotateX(-90deg);
+  /* transform: rotateX(-90deg); */
 }
 
 .is-bg-texture {
diff --git a/src/app/service/tabletop.service.ts b/src/app/service/tabletop.service.ts
index cadeb0b..7b230c1 100644
--- a/src/app/service/tabletop.service.ts
+++ b/src/app/service/tabletop.service.ts
@@ -248,7 +248,7 @@ export class TabletopService {
     let viewTable = this.tableSelecter.viewTable;
     if (!viewTable) return;
 
-    let terrain = Terrain.create('地形', 2, 2, 2, image.identifier, image.identifier);
+    let terrain = Terrain.create('地形', 2, 2, 0, image.identifier, image.identifier);
     terrain.location.x = position.x - 50;
     terrain.location.y = position.y - 50;
     terrain.posZ = position.z;
